console.log("AAAA");
function getActualPlaylist(playlists){
	for (var i = 0; i < playlists.length; i++){
		if(playlists[i].PL_Actual == "1"){
			return playlists[i];
		}
	}
	return null;
}

function downloadPlaylists(){
	jQuery.ajax({
		url: "/backend/getPlaylists.php",
		type: "POST",
		headers: {"tokken":localStorage.getItem("tokken")},
		success: function(resultData) {
			console.log(res);
			var res = JSON.parse(resultData);
			var actual = getActualPlaylist(res);
			ReactDOM.render(
				<PlaylistPanel playlists={res} actual={actual}/>,
				document.getElementById('content')
			);
			
		},
		error : function(jqXHR, textStatus, errorThrown) {
			console.log(errorThrown+" "+textStatus);
		},
		timeout: 120000,
	});
}


var PlaylistPanel = React.createClass({
	render: function() {
		return (
			<div className="panel panel-default">
				<div className="panel-heading">
					Playlists
				</div>
				<div className="panel-body">
					<ChoosePlaylist playlists={this.props.playlists} actual={this.props.actual}/>
				</div>
			</div>
		);
	}
});


var ChoosePlaylist = React.createClass({
	add(){
		console.log("ADD");
		jQuery.ajax({
			url: "/backend/addPlaylist.php?name=" + $('input[name="playlistName"]').val(),
			type: "GET",
			headers: {"tokken":localStorage.getItem("tokken")},
			success: function(resultData) {
				console.log("playlist added");
			},
			error : function(jqXHR, textStatus, errorThrown) {
				console.log(errorThrown+" "+textStatus);
			},
			timeout: 120000,
		});
		this.close();

	},
	getInitialState() {
		return { showModal: false, activeId: 1, data: {} };
	},
	close() {
		this.setState({ showModal: false, activeId: this.state.activeId, data: this.state.data });
	},
	open() {
		this.setState({ showModal: true , activeId: this.state.activeId, data: this.state.data });
	},
	render: function() {
        var ButtonGroup = ReactBootstrap.ButtonGroup;
        var Button  = ReactBootstrap.Button;
	var Modal = ReactBootstrap.Modal;
		return (
			<div>
				<div className="btn-group">
					<button type="button" className="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> {this.props.actual.PL_Name}
						<span className="caret"></span>
					</button>
					<ul className="dropdown-menu">
						{this.props.playlists.map(function(playlist){return (<li><a href="#">{playlist.PL_Name}</a></li>);})}
						<li role="separator" className="divider"></li>
						<li><a href="#" onClick={this.open} >New playlist</a></li>
					</ul>
				</div>
				<Modal show={this.state.showModal} onHide={this.close}>
					<Modal.Header closeButton>
						<Modal.Title>Add Playlist</Modal.Title>
					</Modal.Header>
					<Modal.Body>
						<h4>Name:</h4>
						<div className="input-group">
							<input className="form-control" type="text" name="playlistName" placeholder="Playlist name"/>
						</div>
					</Modal.Body>
					<Modal.Footer>
						<Button onClick={this.close}>Close</Button>
						<Button onClick={this.add}>Save</Button>
					</Modal.Footer>
				</Modal>
			</div>
		);
	}
});

reloadPlaylists();
	
function reloadPlaylists(){
	if (isLogged()){
		downloadPlaylists();
	}
}
